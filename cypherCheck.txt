1) Return the titles of movies acted in by 'Kevin Bacon'.
MATCH (p:Person)-[a:ACTED_IN]-(m:Movie) WHERE p.name = 'Kevin Bacon' RETURN m

2) Return the count of the actors that act in some movie with Keven Bacon.
MATCH (p:Person)-[a:ACTED_IN]-(m:Movie) WHERE p.name = 'Kevin Bacon'
    MATCH (x:Person)-[y:ACTED_IN]-(z:Movie) WHERE z = m RETURN COUNT(x)

3) Return the actors that are at three degrees or less of separation from 'Kevin Bacon'. 
    One degree of separation are actors who act in a movie with Kevin Bacon, and two degrees of 
    separation are actors who act in a movie with some actor who act in a movie with Kevin Bacon, etc.
MATCH (kb:Person)-[:ACTED_IN]-(m0:Movie) WHERE kb.name = 'Kevin Bacon'
MATCH (p1:Person)-[:ACTED_IN]-(m1:Movie) WHERE m1 = m0
MATCH (p4:Person)-[:ACTED_IN]-(m4:Movie) WHERE p1 = p4
MATCH (p2:Person)-[:ACTED_IN]-(m2:Movie) WHERE m2 = m4
MATCH (p5:Person)-[:ACTED_IN]-(m5:Movie) WHERE p5 = p2
MATCH (p3:Person)-[:ACTED_IN]-(m3:Movie) WHERE m3 = m5
MATCH (p6:Person)-[:ACTED_IN]-(m6:Movie) WHERE p6 = p3
return p4, p5, p6

4) Return the persons and movies such that the person both directed and acted in the movie.
MATCH (p:Person)-[d:DIRECTED]-(:Movie)
MATCH (x:Person)-[a:ACTED_IN]-(:Movie)
WHERE p = x
return x

5) Return the actors who have acted in 4 or more movies.
MATCH (p:Person)-[a:ACTED_IN]-(m:Movie) WITH p.name as name, COUNT(a) as num
WHERE num >3
RETURN name, num

6) Return the shortest path between Kevin Bacon and Emile Hirsch
MATCH (KevinB:Person {name: 'Kevin Bacon'} ),
      (Eml:Person {name: 'Emile Hirsch'}),
      p = shortestPath((KevinB)-[*..10]-(Eml))
RETURN p

7) Return the actors that have acted in all of the movies that Emile Hirsch acts in. You may want to form a 
    collection of 'Emile Hirsch' movies and a collection of movies acted in by another person and then use apoc.coll.containsAll 
    to determine if one collection contains (at least) all of the movies that the other has.
MATCH (p:Person{name:'Emile Hirsch'})-[:ACTED_IN]->(m:Movie),
(p2:Person)-[:ACTED_IN]->(m2:Movie)
WITH apoc.convert.toList(m) AS mv,
apoc.convert.toList(m2) as mv2,
p2 as p2
WHERE apoc.coll.containsAll(mv2, mv)
RETURN p2
